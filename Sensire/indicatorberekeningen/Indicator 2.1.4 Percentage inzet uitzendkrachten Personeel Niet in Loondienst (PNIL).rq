# Indicator 2.1.4
# Deze berekening vereist de relatie kik:beschrijftGewerktePeriode. 
# In de map SPARQL staat de query die hiervoor de juiste triples genereert
# SPARQL/koppel_gewerkte_periode.rq

PREFIX kik: <https://purl.org/ozo/kik#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (SUM(?pnil_uren) AS ?teller) (SUM(?uren) AS ?noemer) (?teller/?noemer*100 AS ?indicator)

WHERE { 
    #definieer periode waarin overeenkomst geldig moet zijn
    BIND("2020-01-01"^^xsd:date AS ?start_periode)
    BIND("2020-12-31"^^xsd:date AS ?eind_periode)
    ?overeenkomst kik:startDatum ?start_overeenkomst ;
                  kik:bijbehorendeFunctie/a kik:ZorgverlenerFunctie .           #Filter op zorgverlener
    OPTIONAL {?overeenkomst kik:eindDatum ?eind_overeenkomst}
    FILTER(?start_overeenkomst <= ?eind_periode && ((?eind_overeenkomst >= ?start_periode) || (!BOUND(?eind_overeenkomst))))
    
    ?gewerkteperiode ^kik:bijbehorendeGewerktePeriode ?overeenkomst ; 
        			 kik:startDatum ?start_werk ;
                     kik:eindDatum ?eind_werk ;
                     kik:gewerkteUren ?uren ;

    FILTER(?start_werk >= ?start_periode && ?eind_werk <= ?eind_periode)
    VALUES ?type_overeenkomst {kik:ArbeidsOvereenkomst kik:InhuurOvereenkomst kik:UitzendOvereenkomst}
    ?overeenkomst a ?type_overeenkomst .
    #Ken PNIL uren toe aan inhuur- en uitzendovereenkomsten
    BIND(IF(?type_overeenkomst = kik:InhuurOvereenkomst || ?type_overeenkomst = kik:UitzendOvereenkomst, ?uren, 0) AS ?pnil_uren)
}
